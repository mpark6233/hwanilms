{"request":{"hurl":"https:\/\/www.hwanil.ms.kr\/wp-content\/plugins\/popup-builder\/public\/js\/gutenbergBlock.min.js","inline":"","enable_minification":false,"type":"js","handle":"gutenbergBlock.min.js","version":"4.3.4"},"log":{"url":"\/wp-content\/plugins\/popup-builder\/public\/js\/gutenbergBlock.min.js","success":true},"code":"'use strict';\r\n\r\nfunction SGPBGutenbergBlock() {}\r\n\r\nSGPBGutenbergBlock.prototype.init = function () {\r\n    var localizedParams = SGPB_GUTENBERG_PARAMS;\r\n\r\n    var __ = wp.i18n;\r\n    var createElement = wp.element.createElement;\r\n    var registerBlockType = wp.blocks.registerBlockType;\r\n    var InspectorControls = wp.editor.InspectorControls;\r\n    var _wp$components = wp.components,\r\n        SelectControl = _wp$components.SelectControl,\r\n        TextareaControl = _wp$components.TextareaControl,\r\n        ToggleControl = _wp$components.ToggleControl,\r\n        PanelBody = _wp$components.PanelBody,\r\n        ServerSideRender = _wp$components.ServerSideRender,\r\n        Placeholder = _wp$components.Placeholder;\r\n\r\n    registerBlockType('popupbuilder\/popups', {\r\n        title: localizedParams.title,\r\n        description: localizedParams.description,\r\n        keywords: ['popup', 'popup-builder'],\r\n        category: 'widgets',\r\n        icon: 'welcome-widgets-menus',\r\n        attributes: {\r\n            popupId: {\r\n                type: 'number'\r\n            },\r\n            popupEvent: {\r\n                type: 'string'\r\n            }\r\n        },\r\n        edit: function edit(props) {\r\n            var _props$attributes = props.attributes,\r\n                _props$attributes$pop = _props$attributes.popupId,\r\n                popupId = _props$attributes$pop === undefined ? '' : _props$attributes$pop,\r\n                _props$attributes$dis = _props$attributes.displayTitle,\r\n                displayTitle = _props$attributes$dis === undefined ? false : _props$attributes$dis,\r\n                _props$attributes$dis2 = _props$attributes.displayDesc,\r\n                displayDesc = _props$attributes$dis2 === undefined ? false : _props$attributes$dis2,\r\n                _props$attributes$pop2 = _props$attributes.popupEvent,\r\n                popupEvent = _props$attributes$pop2 === undefined ? '' : _props$attributes$pop2,\r\n                setAttributes = props.setAttributes;\r\n\r\n            var formOptions = SGPB_GUTENBERG_PARAMS.allPopups.map(function (value) {\r\n                return {\r\n                    value: value.id,\r\n                    label: value.title\r\n                };\r\n            });\r\n            var eventsOptions = SGPB_GUTENBERG_PARAMS.allEvents.map(function (value) {\r\n                return {\r\n                    value: value.value,\r\n                    label: value.title\r\n                };\r\n            });\r\n            var jsx = void 0;\r\n\r\n            formOptions.unshift({\r\n                value: '',\r\n                label: SGPB_GUTENBERG_PARAMS.i18n.form_select\r\n            });\r\n\r\n            function selectPopup(value) {\r\n                setAttributes({\r\n                    popupId: value\r\n                });\r\n            }\r\n\r\n            function selectEvent(value) {\r\n                setAttributes({\r\n                    popupEvent: value\r\n                });\r\n            }\r\n\r\n            function setContent(value) {\r\n                setAttributes({\r\n                    content: value\r\n                });\r\n            }\r\n\r\n            function toggleDisplayTitle(value) {\r\n                setAttributes({\r\n                    displayTitle: value\r\n                });\r\n            }\r\n\r\n            function toggleDisplayDesc(value) {\r\n                setAttributes({\r\n                    displayDesc: value\r\n                });\r\n            }\r\n\r\n            jsx = [React.createElement(\r\n                InspectorControls,\r\n                { key: 'popuopbuilder-gutenberg-form-selector-inspector-controls' },\r\n                React.createElement(\r\n                    PanelBody,\r\n                    { title: 'popup builder title' },\r\n                    React.createElement(SelectControl, {\r\n                        label: SGPB_GUTENBERG_PARAMS.i18n.form_selected,\r\n                        value: popupId,\r\n                        options: formOptions,\r\n                        onChange: selectPopup\r\n                    }),\r\n                    React.createElement(SelectControl, {\r\n                        label: SGPB_GUTENBERG_PARAMS.i18n.form_selected,\r\n                        value: popupId,\r\n                        options: eventsOptions,\r\n                        onChange: selectEvent\r\n                    }),\r\n                    React.createElement(ToggleControl, {\r\n                        label: SGPB_GUTENBERG_PARAMS.i18n.show_title,\r\n                        checked: displayTitle,\r\n                        onChange: toggleDisplayTitle\r\n                    }),\r\n                    React.createElement(ToggleControl, {\r\n                        label: SGPB_GUTENBERG_PARAMS.i18n.show_description,\r\n                        checked: displayDesc,\r\n                        onChange: toggleDisplayDesc\r\n                    })\r\n                )\r\n            )];\r\n\r\n            if (popupId && popupEvent) {\r\n                var clickText = '';\r\n                if (popupEvent == 'click') {\r\n                    clickText = 'click me';\r\n                }\r\n                return '[sg_popup id=\"' + popupId + '\" event=\"' + popupEvent + '\"]' + clickText + '[\/sg_popup]';\r\n            } else {\r\n                jsx.push(React.createElement(\r\n                    Placeholder,\r\n                    {\r\n                        key: 'sgpb-gutenberg-form-selector-wrap',\r\n                        className: 'sgpb-gutenberg-form-selector-wrapper'},\r\n                    React.createElement('img', { 'class': SGPB_GUTENBERG_PARAMS.logo_classname, src: SGPB_GUTENBERG_PARAMS.logo_url }),\r\n                    React.createElement(SelectControl, {\r\n                        key: 'sgpb-gutenberg-form-selector-select-control',\r\n                        value: popupId,\r\n                        options: formOptions,\r\n                        onChange: selectPopup\r\n                    }),\r\n                    React.createElement(SelectControl, {\r\n                        key: 'sgpb-gutenberg-form-selector-select-control',\r\n                        value: popupEvent,\r\n                        options: eventsOptions,\r\n                        onChange: selectEvent\r\n                    })\r\n                ));\r\n            }\r\n\r\n            return jsx;\r\n        },\r\n        save: function save(props) {\r\n            var clickText = '';\r\n            if (props.attributes.popupEvent == 'click') {\r\n                clickText = SGPB_GUTENBERG_PARAMS.clickText;\r\n            }\r\n\r\n            return '[sg_popup id=\"' + props.attributes.popupId + '\" event=\"' + props.attributes.popupEvent + '\"]' + clickText + '[\/sg_popup]';\r\n        }\r\n    });\r\n};\r\n\r\njQuery(document).ready(function () {\r\n    if (typeof wp != 'undefined' && typeof wp.element != 'undefined' && typeof wp.blocks != 'undefined' && typeof wp.editor != 'undefined' && typeof wp.components != 'undefined') {\r\n        var block = new SGPBGutenbergBlock();\r\n        block.init();\r\n    }\r\n});\n","status":true}